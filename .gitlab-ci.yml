image: gitlab.protontech.ch:4567/protonvpn/android/android-app-new:protonish5
variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.3"
  ANDROID_SDK_TOOLS: "26.1.1"
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/android-app.git

before_script:
  - if [[ -n "$http_proxy" ]]; then export JAVA_TOOL_OPTIONS="-Dhttp.proxyHost=$( echo ${http_proxy##http://} | cut -d':' -f1 ) -Dhttp.proxyPort=$( echo ${http_proxy##http://} | cut -d':' -f2 ) -Dhttps.proxyHost=$( echo ${https_proxy##http://} | cut -d':' -f1 ) -Dhttps.proxyPort=$( echo ${https_proxy##http://} | cut -d':' -f2 ) -Dhttp.nonProxyHosts=\"$( echo $no_proxy | tr ',' '|' )\""; fi
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x ./gradlew
  - base64 -d - < "$PROTON_KEY_FILE2" > app/protonkey.jks
  - base64 -d - < "$SERVICE_ACCOUNT_FILE" > app/service_account.json
  - md5sum app/protonkey.jks
  - md5sum app/service_account.json
  - base64 -d - < "$GRADLE_PROPERTIES_FILE2" > gradle.properties
  - apt-get -y update
  - apt-get install -y connect-proxy git rsync curl jq
  - 'which ssh-agent || apt-get -y install openssh-client'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - git config --global user.email $GIT_CI_EMAIL
  - git config --global user.name $GIT_CI_USERNAME
  - git config --global url."https://".insteadOf git://
  - mkdir ~/.ssh 2> /dev/null
  - |
    cat <<EOF > ~/.ssh/config
    Host github.com
        Hostname ssh.github.com
        User git
        Port 443
        ProxyCommand connect-proxy -H $http_proxy %h %p
    EOF
  - ssh-keyscan -t rsa ${CI_SERVER_HOST} > ~/.ssh/known_hosts
  ## ssh-keyscan doesn't support proxies so we can't fetch the fingerprint online
  - |
    cat <<EOF >> ~/.ssh/known_hosts
    # ssh.github.com:443 SSH-2.0-babeld-2e9d163d
    [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    EOF
  - cat ~/.ssh/config
  - git fetch origin development

stages:
  - analyze
  - build
  - test
  - report
  - bot
  - mirror
  - publish

cache:
  key: gradle
  paths:
    - .gradle/wrapper
    - .gradle/caches

java style:
  stage: analyze
  tags:
    - android
  script:
    - ./gradlew checkstyle
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/reports/checkstyle

detekt analysis:
  stage: analyze
  tags:
    - android
  script:
    - ./gradlew detekt
  artifacts:
    expire_in: 4 weeks
    reports:
        codequality: app/build/reports/detekt.json

build debug:
  stage: build
  tags:
    - android
  script:
    - ./gradlew assembleDirectDebug
    - ./gradlew assembleDirectDebugAndroidTest
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - app/build/
      - openvpn/build/
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

build blue:
  stage: build
  tags:
    - android
  script:
    - ./gradlew assembleBlueDebug
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

build google play release:
  stage: build
  except:
    - master
  tags:
    - android
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew assembleGooglePlayRelease -PabiSplit -PbuildUniversalApk
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

build release (auto):
  stage: build
  only:
    refs:
      - master
  tags:
    - android
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew assembleDirectRelease -PabiSplit -PbuildUniversalApk
  artifacts:
    expire_in: 3 week
    paths:
      - app/build/outputs/apk

unit tests:
  stage: test
  tags:
    - android
  script:
    - ./gradlew test

.tests_preparation_script: &tests_preparation_script
  stage: test
  tags:
    - android
  script:
  - chmod +x gradlew
  - export ARCHIVES_BASE_NAME=$(./gradlew -q getArchivesName | tail -n 1)
  - echo ${ARCHIVES_BASE_NAME}
  - wget --quiet --output-document=/tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz
  - mkdir -p /opt
  - tar zxf /tmp/google-cloud-sdk.tar.gz --directory /opt
  - /opt/google-cloud-sdk/install.sh --quiet
  - source /opt/google-cloud-sdk/path.bash.inc

  - gcloud components update
  - echo $CLOUD_PROJECT_ID
  - gcloud config set project $CLOUD_PROJECT_ID
  - echo $SERVICE_ACCOUNT > /tmp/service-account.json
  - gcloud auth activate-service-account --key-file /tmp/service-account.json
  - APP="$APP_LOCATION"${ARCHIVES_BASE_NAME}-${APP_TYPE}
  - TEST_APP="$TEST_APP_LOCATION"${ARCHIVES_BASE_NAME}-${TEST_APP_TYPE}
  - echo $APP
  - echo $TEST_APP
  - echo $PWD
  - gcloud firebase test android run firebase-device-config.yml:${TESTS_TYPE} --app "$APP" --test "$TEST_APP"  --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec"  --directories-to-pull /sdcard
  - coverageFile=`gsutil ls gs://test-lab-5w5jc16j2t3nz-wzxvv7m6j0vt6/**/*.ec | tail -1`
  - gsutil cp $coverageFile app/build/outputs/apk | true
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

firebase quick tests:
  <<: *tests_preparation_script
  variables:
    TESTS_TYPE: quickTest
    APP_LOCATION: "app/build/outputs/apk/direct/debug/"
    APP_TYPE: "direct-debug.apk"
    TEST_APP_LOCATION: "app/build/outputs/apk/androidTest/direct/debug/"
    TEST_APP_TYPE: "direct-debug-androidTest.apk"
  only:
  - branches
  except:
  - master
  - development

firebase full tests:
  <<: *tests_preparation_script
  variables:
    TESTS_TYPE: fullTest
    APP_LOCATION: "app/build/outputs/apk/direct/debug/"
    APP_TYPE: "direct-debug.apk"
    TEST_APP_LOCATION: "app/build/outputs/apk/androidTest/direct/debug/"
    TEST_APP_TYPE: "direct-debug-androidTest.apk"
  only:
  - master
  - development

coverage report:
  stage: report
  tags:
    - android
  script:
    - ./gradlew jacocoTestReport
    - ./gradlew coverageReport
  allow_failure: true
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/reports

owasp check:
  stage: report
  tags:
    - android
  script:
    - ./gradlew dependencyCheckAggregate
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
      - build/reports

sync-app:
  cache: {}
  stage: mirror
  only:
    refs:
      - master

  script:
    # Clone instead of using the current CI as it creates the error (shallow update not allowed)
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    # Push the latest tag we can find
    - git push public "$(git describe --abbrev=0)"

publish-apk-internal:
  stage: publish
  only:
    refs:
      - development
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew publishInternal -PabiSplit


include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'agarroux/publish-github'
    ref: master
    file: '/jobs/release.gitlab-ci.yml'

i18n-sync-crowdin:
  variables:
      I18N_SYNC_BRANCH: development
      I18N_SYNC_CROWDIN_PROJECT: 'android-vpn'
  extends: .i18n-sync-crowdin-shared

i18n-commit-locales:
  variables:
      I18N_COMMIT_BRANCH_PUSH: development
      I18N_COMMIT_BRANCH_ALLOWED: development
      I18N_COMMIT_CROWDIN_PROJECT: 'android-vpn'
  extends: .i18n-commit-locales-shared

publish-github:
  stage: publish
  only:
    refs:
      - master
  variables:
    RELEASE_APP: android-vpn
    RELEASE_GITHUB_REPOSITORY: $PUBLIC_REPO_URL
  extends: .release-make-release
